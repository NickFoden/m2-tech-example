{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/vivienneobrien/Desktop/mh2-tech-test-main/components/detail.js\";\nimport NumberFormat from \"react-number-format\";\n/* eslint-disable max-statements */\n\nimport PropTypes from \"prop-types\";\nimport React, { useEffect } from \"react\";\nimport { add, format } from \"date-fns\";\nimport { Button } from \"./button\";\nimport { AccountHeadline, AccountLabel, AccountSection, AccountList, InfoText, Inset, RowContainer } from \"./style\";\n\nconst subtract = (a, b) => {\n  const total = a - b;\n  return total;\n};\n\nconst calculatePercentage = (a, b) => {\n  const total = a / b * 100;\n  return total;\n};\n\nconst formatPercentage = a => {\n  return a + \"%\" // .float/.ceil etc think about rounding and to a specific space\n  ;\n};\n\nconst divide = (a, b) => {\n  const total = a / b;\n  return total;\n};\n\nconst sincePurchased = ({\n  recentValuation,\n  originalPurchasePrice\n}) => {\n  const sincePurchasedPrice = subtract(recentValuation.amount, originalPurchasePrice); // subtract (take it out of busines context), separation of concerns/calculations\n  // Can also do: <NumberFormat value={sincePurchasedPrice} displayType=\"text\" thousandSeparator={true} prefix=\"Â£\" decimalScale={2} />\n\n  {\n    new Intl.NumberFormat(\"en-GB\", {\n      style: \"currency\",\n      currency: \"GBP\",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(sincePurchasedPrice);\n  }\n  return sincePurchasedPrice;\n};\n\nconst sincePurchasedPercentage = ({\n  recentValuation,\n  originalPurchasePrice\n}) => {\n  const sincePurchasedPrice = subtract(recentValuation.amount, originalPurchasePrice);\n  const sincePurchasedPricePercentageCalculation = calculatePercentage(sincePurchasedPrice, originalPurchasePrice);\n  const sincePurchasedPricePercentageFormatted = formatPercentage(sincePurchasedPricePercentageCalculation);\n  return sincePurchasedPricePercentageFormatted;\n};\n\nconst annualAppreciation = ({\n  recentValuation,\n  originalPurchasePrice,\n  originalPurchasePriceDate\n}) => {\n  const sincePurchasedPrice = subtract(recentValuation.amount, originalPurchasePrice);\n  const sincePurchasedPricePercentageCalculation = calculatePercentage(sincePurchasedPrice, originalPurchasePrice);\n  const currentYear = new Date().getFullYear();\n  const numberOfYearsSincePurchased = currentYear - parseInt(originalPurchasePriceDate.slice(0, 4));\n  const annualAppreciationCalculation = divide(sincePurchasedPricePercentageCalculation, numberOfYearsSincePurchased);\n  const annualAppreciationFormatted = formatPercentage(annualAppreciationCalculation);\n  return annualAppreciationFormatted;\n}; // util.js file as plain js, pass in one date and give back a new string\n// semantic: use correct attributes e.g. h1 over a span. break down html semantics the right way\n\n\nconst formatDate = ({\n  originalPurchasePriceDate\n}) => {\n  return new Intl.DateTimeFormat(\"en-GB\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"2-digit\"\n  }).format(originalPurchasePriceDate);\n}; // const account = {\n//   uid: \"65156cdc-5cfd-4b34-b626-49c83569f35e\",\n//   deleted: false,\n//   dateCreated: \"2020-12-03T08:55:33.421Z\",\n//   currency: \"GBP\",\n//   name: \"15 Temple Way\",\n//   bankName: \"Residential\",\n//   type: \"properties\",\n//   subType: \"residential\",\n//   originalPurchasePrice: 250000,\n//   originalPurchasePriceDate: \"2017-09-03\",\n//   recentValuation: { amount: 310000, status: \"good\" },\n//   associatedMortgages: [\n//     {\n//       name: \"HSBC Repayment Mortgage\",\n//       uid: \"fb463121-b51a-490d-9f19-d2ea76f05e25\",\n//       currentBalance: -175000,\n//     },\n//   ],\n//   canBeManaged: false,\n//   postcode: \"BS1 2AA\",\n//   lastUpdate: \"2020-12-01T08:55:33.421Z\",\n//   updateAfterDays: 30,\n// };\n// state, setstate then render\n// const Detail = ({}) => {\n//   useEffect(() => {\n//     window\n//       .fetch(\"/api/account\")\n//       .then((res) => res.json())\n//       .then(console.log);\n//   }, []);\n\n\nconst [account, setAccount] = useState({});\n\nconst Detail = () => {\n  useEffect(() => {\n    axios.get(\"/api/account\").then(response => setAccount(response.data)).then(console.log());\n  }, []);\n  let mortgage;\n  const lastUpdate = new Date(account.lastUpdate);\n\n  if (account.associatedMortgages.length) {\n    mortgage = account.associatedMortgages[0];\n  }\n\n  return /*#__PURE__*/_jsxDEV(Inset, {\n    children: [/*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Estimated Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AccountHeadline, {\n        children: new Intl.NumberFormat(\"en-GB\", {\n          style: \"currency\",\n          currency: \"GBP\"\n        }).format(account.recentValuation.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AccountList, {\n        children: [/*#__PURE__*/_jsxDEV(InfoText, {\n          children: `Last updated ${format(lastUpdate, \"do MMM yyyy\")}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoText, {\n          children: `Next update ${format(add(lastUpdate, {\n            days: account.updateAfterDays\n          }), \"do MMM yyyy\")}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Property details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowContainer, {\n        children: /*#__PURE__*/_jsxDEV(AccountList, {\n          children: [/*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.bankName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.postcode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), mortgage && /*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Mortgage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RowContainer // This is a dummy action\n      , {\n        onClick: () => alert(\"You have navigated to the mortgage page\"),\n        children: /*#__PURE__*/_jsxDEV(AccountList, {\n          children: [/*#__PURE__*/_jsxDEV(InfoText, {\n            children: new Intl.NumberFormat(\"en-GB\", {\n              style: \"currency\",\n              currency: \"GBP\"\n            }).format(Math.abs(account.associatedMortgages[0].currentBalance))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.associatedMortgages[0].name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Valuation Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowContainer, {\n        children: /*#__PURE__*/_jsxDEV(AccountList, {\n          children: [/*#__PURE__*/_jsxDEV(InfoText, {\n            children: [\"Purchased for\\xA0\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\xA3199,500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 34\n            }, this), \"\\xA0 on the\\xA0\", formatDate({\n              account\n            }), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: [\"Since purchase\\xA0\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [sincePurchased(account), \" \", sincePurchasedPercentage(account)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: [\"Annual Appreciation\\xA0\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: annualAppreciation(account)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button // This is a dummy action\n    , {\n      onClick: () => alert(\"You have navigated to the edit account page\"),\n      children: \"Edit account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Detail;","map":{"version":3,"sources":["/Users/vivienneobrien/Desktop/mh2-tech-test-main/components/detail.js"],"names":["NumberFormat","PropTypes","React","useEffect","add","format","Button","AccountHeadline","AccountLabel","AccountSection","AccountList","InfoText","Inset","RowContainer","subtract","a","b","total","calculatePercentage","formatPercentage","divide","sincePurchased","recentValuation","originalPurchasePrice","sincePurchasedPrice","amount","Intl","style","currency","minimumFractionDigits","maximumFractionDigits","sincePurchasedPercentage","sincePurchasedPricePercentageCalculation","sincePurchasedPricePercentageFormatted","annualAppreciation","originalPurchasePriceDate","currentYear","Date","getFullYear","numberOfYearsSincePurchased","parseInt","slice","annualAppreciationCalculation","annualAppreciationFormatted","formatDate","DateTimeFormat","year","month","day","account","setAccount","useState","Detail","axios","get","then","response","data","console","log","mortgage","lastUpdate","associatedMortgages","length","days","updateAfterDays","name","bankName","postcode","alert","Math","abs","currentBalance"],"mappings":"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","sourcesContent":["import NumberFormat from \"react-number-format\";\n\n/* eslint-disable max-statements */\nimport PropTypes from \"prop-types\";\nimport React, { useEffect } from \"react\";\nimport { add, format } from \"date-fns\";\nimport { Button } from \"./button\";\n\nimport {\n  AccountHeadline,\n  AccountLabel,\n  AccountSection,\n  AccountList,\n  InfoText,\n  Inset,\n  RowContainer,\n} from \"./style\";\n\nconst subtract = (a, b) => {\n  const total = a - b;\n  return total;\n};\n\nconst calculatePercentage = (a, b) => {\n  const total = (a/ b) * 100;\n  return total;\n}\n\nconst formatPercentage = (a) => {\n  return (\n     a + \"%\" // .float/.ceil etc think about rounding and to a specific space\n  )\n}\n\nconst divide = (a,b) => {\n  const total = a/b;\n  return (\n   total\n  );\n}\n\nconst sincePurchased = ({ recentValuation, originalPurchasePrice }) => {\n  const sincePurchasedPrice = subtract(recentValuation.amount, originalPurchasePrice); // subtract (take it out of busines context), separation of concerns/calculations\n  // Can also do: <NumberFormat value={sincePurchasedPrice} displayType=\"text\" thousandSeparator={true} prefix=\"Â£\" decimalScale={2} />\n  {\n    new Intl.NumberFormat(\"en-GB\", {\n      style: \"currency\",\n      currency: \"GBP\",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(sincePurchasedPrice);\n  }\n  return sincePurchasedPrice;\n};\n\nconst sincePurchasedPercentage = ({\n  recentValuation,\n  originalPurchasePrice,\n}) => {\n  const sincePurchasedPrice = subtract(recentValuation.amount,originalPurchasePrice);\n  const sincePurchasedPricePercentageCalculation = calculatePercentage(sincePurchasedPrice, originalPurchasePrice);\n  const sincePurchasedPricePercentageFormatted = formatPercentage(sincePurchasedPricePercentageCalculation);\n  return sincePurchasedPricePercentageFormatted;\n};\n\nconst annualAppreciation = ({\n  recentValuation,\n  originalPurchasePrice,\n  originalPurchasePriceDate,\n}) => {\n  const sincePurchasedPrice = subtract(recentValuation.amount,originalPurchasePrice);\n  const sincePurchasedPricePercentageCalculation = calculatePercentage(sincePurchasedPrice,originalPurchasePrice);\n\n  const currentYear = new Date().getFullYear();\n  const numberOfYearsSincePurchased =\n    currentYear - parseInt(originalPurchasePriceDate.slice(0, 4));\n\n  const annualAppreciationCalculation = divide(sincePurchasedPricePercentageCalculation, numberOfYearsSincePurchased);\n  const annualAppreciationFormatted = formatPercentage(annualAppreciationCalculation);\n  return annualAppreciationFormatted;\n};\n\n// util.js file as plain js, pass in one date and give back a new string\n// semantic: use correct attributes e.g. h1 over a span. break down html semantics the right way\nconst formatDate = ({ originalPurchasePriceDate }) => {\n  return new Intl.DateTimeFormat(\"en-GB\", {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"2-digit\",\n      }).format(originalPurchasePriceDate)\n  ;\n};\n\n// const account = {\n//   uid: \"65156cdc-5cfd-4b34-b626-49c83569f35e\",\n//   deleted: false,\n//   dateCreated: \"2020-12-03T08:55:33.421Z\",\n//   currency: \"GBP\",\n//   name: \"15 Temple Way\",\n//   bankName: \"Residential\",\n//   type: \"properties\",\n//   subType: \"residential\",\n//   originalPurchasePrice: 250000,\n//   originalPurchasePriceDate: \"2017-09-03\",\n//   recentValuation: { amount: 310000, status: \"good\" },\n//   associatedMortgages: [\n//     {\n//       name: \"HSBC Repayment Mortgage\",\n//       uid: \"fb463121-b51a-490d-9f19-d2ea76f05e25\",\n//       currentBalance: -175000,\n//     },\n//   ],\n//   canBeManaged: false,\n//   postcode: \"BS1 2AA\",\n//   lastUpdate: \"2020-12-01T08:55:33.421Z\",\n//   updateAfterDays: 30,\n// };\n\n// state, setstate then render\n// const Detail = ({}) => {\n//   useEffect(() => {\n//     window\n//       .fetch(\"/api/account\")\n//       .then((res) => res.json())\n//       .then(console.log);\n//   }, []);\n\nconst [account, setAccount] = useState({})\n\n  const Detail = () => {\n  useEffect(() => {\n    axios\n      .get(\"/api/account\")\n      .then((response) => setAccount(response.data))\n      .then(console.log());\n  }, []);\n\n  let mortgage;\n  const lastUpdate = new Date(account.lastUpdate);\n  if (account.associatedMortgages.length) {\n    mortgage = account.associatedMortgages[0];\n  }\n\n  return (\n    <Inset>\n      <AccountSection>\n        <AccountLabel>Estimated Value</AccountLabel>\n        <AccountHeadline>\n          {new Intl.NumberFormat(\"en-GB\", {\n            style: \"currency\",\n            currency: \"GBP\",\n          }).format(account.recentValuation.amount)}\n        </AccountHeadline>\n        <AccountList>\n          <InfoText>\n            {`Last updated ${format(lastUpdate, \"do MMM yyyy\")}`}\n          </InfoText>\n          <InfoText>\n            {`Next update ${format(\n              add(lastUpdate, { days: account.updateAfterDays }),\n              \"do MMM yyyy\"\n            )}`}\n          </InfoText>\n        </AccountList>\n      </AccountSection>\n      <AccountSection>\n        <AccountLabel>Property details</AccountLabel>\n        <RowContainer>\n          <AccountList>\n            <InfoText>{account.name}</InfoText>\n            <InfoText>{account.bankName}</InfoText>\n            <InfoText>{account.postcode}</InfoText>\n          </AccountList>\n        </RowContainer>\n      </AccountSection>\n      {mortgage && (\n        <AccountSection>\n          <AccountLabel>Mortgage</AccountLabel>\n          <RowContainer\n            // This is a dummy action\n            onClick={() => alert(\"You have navigated to the mortgage page\")}\n          >\n            <AccountList>\n              <InfoText>\n                {new Intl.NumberFormat(\"en-GB\", {\n                  style: \"currency\",\n                  currency: \"GBP\",\n                }).format(\n                  Math.abs(account.associatedMortgages[0].currentBalance)\n                )}\n              </InfoText>\n              <InfoText>{account.associatedMortgages[0].name}</InfoText>\n            </AccountList>\n          </RowContainer>\n        </AccountSection>\n      )}\n      <AccountSection>\n        <AccountLabel>Valuation Changes</AccountLabel>\n        <RowContainer>\n          <AccountList>\n            <InfoText>\n              Purchased for&nbsp;<strong>Â£199,500</strong>&nbsp; on the&nbsp;\n              {formatDate({ account })}{\" \"}\n            </InfoText>\n            <InfoText>\n              Since purchase&nbsp;\n              <strong>\n                {sincePurchased(account)} {sincePurchasedPercentage(account)}\n              </strong>\n            </InfoText>\n            <InfoText>\n              Annual Appreciation&nbsp;\n              <strong>{annualAppreciation(account)}</strong>\n            </InfoText>\n          </AccountList>\n        </RowContainer>\n      </AccountSection>\n      <Button\n        // This is a dummy action\n        onClick={() => alert(\"You have navigated to the edit account page\")}\n      >\n        Edit account\n      </Button>\n    </Inset>\n  );\n};\n\nexport default Detail;\n"]},"metadata":{},"sourceType":"module"}