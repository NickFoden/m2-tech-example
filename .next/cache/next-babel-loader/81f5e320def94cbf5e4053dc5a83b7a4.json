{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/vivienneobrien/Desktop/mh2-tech-test-main/components/detail.js\";\nimport NumberFormat from \"react-number-format\";\n/* eslint-disable max-statements */\n\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\nimport { add, format } from \"date-fns\";\nimport { Button } from \"./button\";\nimport axios from 'axios';\nimport { AccountHeadline, AccountLabel, AccountSection, AccountList, InfoText, Inset, RowContainer } from \"./style\";\n\nconst subtract = (a, b) => {\n  const total = a - b;\n  return total;\n};\n\nconst calculatePercentage = (a, b) => {\n  const total = a / b * 100;\n  return total;\n}; // More functionality can be added here if a percentage was not a perfect decimal and needed to be rounded to a certain decimal place, up or down (.floor/.ceil)\n\n\nconst formatPercentage = a => {\n  return a + \"%\";\n};\n\nconst divide = (a, b) => {\n  const total = a / b;\n  return total;\n};\n\nconst formatDate = a => {\n  return new Intl.DateTimeFormat(\"en-GB\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"2-digit\"\n  }).format(a);\n};\n\nconst formatAmount = a => {\n  return new Intl.NumberFormat(\"en-GB\", {\n    style: \"currency\",\n    currency: \"GBP\",\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(a);\n};\n\nconst sincePurchased = ({\n  recentValuation,\n  originalPurchasePrice\n}) => {\n  const sincePurchasedPrice = subtract(recentValuation.amount, originalPurchasePrice); // subtract (take it out of busines context), separation of concerns/calculations\n  // Can also do: <NumberFormat value={sincePurchasedPrice} displayType=\"text\" thousandSeparator={true} prefix=\"Â£\" decimalScale={2} />\n\n  const sincePurchasedPriceFormatted = formatAmount(sincePurchasedPrice);\n  return sincePurchasedPriceFormatted;\n}; // util.js file as plain js, pass in one date and give back a new string\n// semantic: use correct attributes e.g. h1 over a span. break down html semantics the right way\n//const formatDate = (a) => {\n\n\nconst sincePurchasedPercentage = ({\n  recentValuation,\n  originalPurchasePrice\n}) => {\n  const sincePurchasedPrice = subtract(recentValuation.amount, originalPurchasePrice);\n  const sincePurchasedPricePercentageCalculation = calculatePercentage(sincePurchasedPrice, originalPurchasePrice);\n  const sincePurchasedPricePercentageFormatted = formatPercentage(sincePurchasedPricePercentageCalculation);\n  return sincePurchasedPricePercentageFormatted;\n};\n\nconst annualAppreciation = ({\n  recentValuation,\n  originalPurchasePrice,\n  originalPurchasePriceDate\n}) => {\n  const sincePurchasedPrice = subtract(recentValuation.amount, originalPurchasePrice);\n  const sincePurchasedPricePercentageCalculation = calculatePercentage(sincePurchasedPrice, originalPurchasePrice);\n  const currentYear = new Date().getFullYear();\n  const numberOfYearsSincePurchased = currentYear - parseInt(originalPurchasePriceDate.slice(0, 4));\n  const annualAppreciationCalculation = divide(sincePurchasedPricePercentageCalculation, numberOfYearsSincePurchased);\n  const annualAppreciationFormatted = formatPercentage(annualAppreciationCalculation);\n  return annualAppreciationFormatted;\n}; // const account = {\n//   uid: \"65156cdc-5cfd-4b34-b626-49c83569f35e\",\n//   deleted: false,\n//   dateCreated: \"2020-12-03T08:55:33.421Z\",\n//   currency: \"GBP\",\n//   name: \"15 Temple Way\",\n//   bankName: \"Residential\",\n//   type: \"properties\",\n//   subType: \"residential\",\n//   originalPurchasePrice: 250000,\n//   originalPurchasePriceDate: \"2017-09-03\",\n//   recentValuation: { amount: 310000, status: \"good\" },\n//   associatedMortgages: [\n//     {\n//       name: \"HSBC Repayment Mortgage\",\n//       uid: \"fb463121-b51a-490d-9f19-d2ea76f05e25\",\n//       currentBalance: -175000,\n//     },\n//   ],\n//   canBeManaged: false,\n//   postcode: \"BS1 2AA\",\n//   lastUpdate: \"2020-12-01T08:55:33.421Z\",\n//   updateAfterDays: 30,\n// };\n\n\nconst Detail = () => {\n  const {\n    0: account,\n    1: setAccount\n  } = useState({});\n  useEffect(() => {\n    axios.get(\"/api/account\").then(response => setAccount(response.account)).then(console.log());\n  }, []); // checking if account is empty\n\n  if (!!account) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }, this);\n  }\n\n  console.log(account); // const Detail = ({}) => {\n  //   useEffect(() => {\n  //     window\n  //       .fetch(\"/api/account\")\n  //       .then((res) => res.json())\n  //       .then(console.log);\n  //   }, []);\n\n  let mortgage;\n  const lastUpdate = new Date(account.lastUpdate);\n\n  if (account.associatedMortgages.length) {\n    mortgage = account.associatedMortgages[0];\n  }\n\n  const recentValuationAmountFormatted = formatAmount(account.recentValuation.amount);\n  const currentBalanceFormatted = formatAmount(Math.abs(account.associatedMortgages[0].currentBalance));\n  const lastUpdatedFormatted = formatDate(lastUpdate);\n  console.log(lastUpdate);\n  const originalPurchasePriceDateFormatted = formatDate(account.originalPurchasePriceDateFormatted); // const originalPruchasePriceFormatted = formatAmount(originalPurchasePrice)\n\n  return /*#__PURE__*/_jsxDEV(Inset, {\n    children: [/*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Estimated Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AccountHeadline, {\n        children: recentValuationAmountFormatted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AccountList, {\n        children: [/*#__PURE__*/_jsxDEV(InfoText, {\n          children: `Last updated ${lastUpdatedFormatted}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoText, {\n          children: `Next update ${format(add(lastUpdate, {\n            days: account.updateAfterDays\n          }), \"do MMM yyyy\")}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Property details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowContainer, {\n        children: /*#__PURE__*/_jsxDEV(AccountList, {\n          children: [/*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.bankName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.postcode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), mortgage && /*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Mortgage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RowContainer // This is a dummy action\n      , {\n        onClick: () => alert(\"You have navigated to the mortgage page\"),\n        children: /*#__PURE__*/_jsxDEV(AccountList, {\n          children: [/*#__PURE__*/_jsxDEV(InfoText, {\n            children: currentBalanceFormatted\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.associatedMortgages[0].name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Valuation Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowContainer, {\n        children: /*#__PURE__*/_jsxDEV(AccountList, {\n          children: [/*#__PURE__*/_jsxDEV(InfoText, {\n            children: [\"Purchased for\\xA0\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: formatAmount(account.originalPurchasePrice)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 34\n            }, this), \"\\xA0 on the\\xA0\", originalPurchasePriceDateFormatted]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: [\"Since purchase\\xA0\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [sincePurchased(account), \" \", sincePurchasedPercentage(account)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: [\"Annual Appreciation\\xA0\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: annualAppreciation(account)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button // This is a dummy action\n    , {\n      onClick: () => alert(\"You have navigated to the edit account page\"),\n      children: \"Edit account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}; // Images.propTypes = {\n//   url: PropTypes.string.isRequired,\n// };\n\n\nexport default Detail;","map":{"version":3,"sources":["/Users/vivienneobrien/Desktop/mh2-tech-test-main/components/detail.js"],"names":["NumberFormat","PropTypes","React","useEffect","useState","add","format","Button","axios","AccountHeadline","AccountLabel","AccountSection","AccountList","InfoText","Inset","RowContainer","subtract","a","b","total","calculatePercentage","formatPercentage","divide","formatDate","Intl","DateTimeFormat","year","month","day","formatAmount","style","currency","minimumFractionDigits","maximumFractionDigits","sincePurchased","recentValuation","originalPurchasePrice","sincePurchasedPrice","amount","sincePurchasedPriceFormatted","sincePurchasedPercentage","sincePurchasedPricePercentageCalculation","sincePurchasedPricePercentageFormatted","annualAppreciation","originalPurchasePriceDate","currentYear","Date","getFullYear","numberOfYearsSincePurchased","parseInt","slice","annualAppreciationCalculation","annualAppreciationFormatted","Detail","account","setAccount","get","then","response","console","log","mortgage","lastUpdate","associatedMortgages","length","recentValuationAmountFormatted","currentBalanceFormatted","Math","abs","currentBalance","lastUpdatedFormatted","originalPurchasePriceDateFormatted","days","updateAfterDays","name","bankName","postcode","alert"],"mappings":"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","sourcesContent":["import NumberFormat from \"react-number-format\";\n/* eslint-disable max-statements */\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\nimport { add, format } from \"date-fns\";\nimport { Button } from \"./button\";\nimport axios from 'axios';\n\nimport {\n  AccountHeadline,\n  AccountLabel,\n  AccountSection,\n  AccountList,\n  InfoText,\n  Inset,\n  RowContainer,\n} from \"./style\";\n\nconst subtract = (a, b) => {\n  const total = a - b;\n  return total;\n};\n\nconst calculatePercentage = (a, b) => {\n  const total = (a / b) * 100;\n  return total;\n};\n\n// More functionality can be added here if a percentage was not a perfect decimal and needed to be rounded to a certain decimal place, up or down (.floor/.ceil)\nconst formatPercentage = (a) => {\n  return (\n    a + \"%\" \n  );\n};\n\nconst divide = (a, b) => {\n  const total = a / b;\n  return total;\n};\n\nconst formatDate = (a) => {\n  return new Intl.DateTimeFormat(\"en-GB\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"2-digit\",\n  }).format(a);\n};\n\nconst formatAmount = (a) => {\n  return new Intl.NumberFormat(\"en-GB\", {\n    style: \"currency\",\n    currency: \"GBP\",\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(a);\n}\n\nconst sincePurchased = ({ recentValuation, originalPurchasePrice }) => {\n  const sincePurchasedPrice = subtract(\n    recentValuation.amount,\n    originalPurchasePrice\n  ); // subtract (take it out of busines context), separation of concerns/calculations\n  // Can also do: <NumberFormat value={sincePurchasedPrice} displayType=\"text\" thousandSeparator={true} prefix=\"Â£\" decimalScale={2} />\n  const sincePurchasedPriceFormatted = formatAmount(sincePurchasedPrice)\n  return sincePurchasedPriceFormatted;\n};\n\n// util.js file as plain js, pass in one date and give back a new string\n// semantic: use correct attributes e.g. h1 over a span. break down html semantics the right way\n//const formatDate = (a) => {\n\n\nconst sincePurchasedPercentage = ({\n  recentValuation,\n  originalPurchasePrice,\n}) => {\n  const sincePurchasedPrice = subtract(\n    recentValuation.amount,\n    originalPurchasePrice\n  );\n  const sincePurchasedPricePercentageCalculation = calculatePercentage(\n    sincePurchasedPrice,\n    originalPurchasePrice\n  );\n  const sincePurchasedPricePercentageFormatted = formatPercentage(\n    sincePurchasedPricePercentageCalculation\n  );\n  return sincePurchasedPricePercentageFormatted;\n};\n\nconst annualAppreciation = ({\n  recentValuation,\n  originalPurchasePrice,\n  originalPurchasePriceDate,\n}) => {\n  const sincePurchasedPrice = subtract(\n    recentValuation.amount,\n    originalPurchasePrice\n  );\n  const sincePurchasedPricePercentageCalculation = calculatePercentage(\n    sincePurchasedPrice,\n    originalPurchasePrice\n  );\n\n  const currentYear = new Date().getFullYear();\n  const numberOfYearsSincePurchased =\n    currentYear - parseInt(originalPurchasePriceDate.slice(0, 4));\n\n  const annualAppreciationCalculation = divide(\n    sincePurchasedPricePercentageCalculation,\n    numberOfYearsSincePurchased\n  );\n  const annualAppreciationFormatted = formatPercentage(\n    annualAppreciationCalculation\n  );\n  return annualAppreciationFormatted;\n};\n\n// const account = {\n//   uid: \"65156cdc-5cfd-4b34-b626-49c83569f35e\",\n//   deleted: false,\n//   dateCreated: \"2020-12-03T08:55:33.421Z\",\n//   currency: \"GBP\",\n//   name: \"15 Temple Way\",\n//   bankName: \"Residential\",\n//   type: \"properties\",\n//   subType: \"residential\",\n//   originalPurchasePrice: 250000,\n//   originalPurchasePriceDate: \"2017-09-03\",\n//   recentValuation: { amount: 310000, status: \"good\" },\n//   associatedMortgages: [\n//     {\n//       name: \"HSBC Repayment Mortgage\",\n//       uid: \"fb463121-b51a-490d-9f19-d2ea76f05e25\",\n//       currentBalance: -175000,\n//     },\n//   ],\n//   canBeManaged: false,\n//   postcode: \"BS1 2AA\",\n//   lastUpdate: \"2020-12-01T08:55:33.421Z\",\n//   updateAfterDays: 30,\n// };\n\n\n\nconst Detail = () => {\n  const [account, setAccount] = useState({});\n\nuseEffect(() => {\n  axios\n    .get(\"/api/account\")\n    .then((response) => setAccount(response.account))\n    .then(console.log());\n}, []);\n\n// checking if account is empty\nif (!!account) {\n  return (<div></div>)\n} \n\n  console.log(account)\n\n// const Detail = ({}) => {\n//   useEffect(() => {\n//     window\n//       .fetch(\"/api/account\")\n//       .then((res) => res.json())\n//       .then(console.log);\n//   }, []);\n\n  let mortgage;\n  const lastUpdate = new Date(account.lastUpdate);\n  if (account.associatedMortgages.length) {\n    mortgage = account.associatedMortgages[0];\n  }\n\n  const recentValuationAmountFormatted = formatAmount(account.recentValuation.amount);\n  const currentBalanceFormatted = formatAmount(Math.abs(account.associatedMortgages[0].currentBalance));\n  const lastUpdatedFormatted = formatDate(lastUpdate);\n  console.log(lastUpdate)\n  const originalPurchasePriceDateFormatted = formatDate(account.originalPurchasePriceDateFormatted)\n  // const originalPruchasePriceFormatted = formatAmount(originalPurchasePrice)\n  \n  return (\n    <Inset>\n      <AccountSection>\n        <AccountLabel>Estimated Value</AccountLabel>\n        <AccountHeadline>\n          {recentValuationAmountFormatted}\n        </AccountHeadline>\n        <AccountList>\n          <InfoText>\n            {`Last updated ${lastUpdatedFormatted}`}\n          </InfoText>\n          <InfoText>\n            {`Next update ${format(add(lastUpdate, { days: account.updateAfterDays }),\"do MMM yyyy\")}`}\n          </InfoText>\n        </AccountList>\n      </AccountSection>\n      <AccountSection>\n        <AccountLabel>Property details</AccountLabel>\n        <RowContainer>\n          <AccountList>\n            <InfoText>{account.name}</InfoText>\n            <InfoText>{account.bankName}</InfoText>\n            <InfoText>{account.postcode}</InfoText>\n          </AccountList>\n        </RowContainer>\n      </AccountSection>\n      {mortgage && (\n        <AccountSection>\n          <AccountLabel>Mortgage</AccountLabel>\n          <RowContainer\n            // This is a dummy action\n            onClick={() => alert(\"You have navigated to the mortgage page\")}\n          >\n            <AccountList>\n              <InfoText>\n                {currentBalanceFormatted}\n              </InfoText>\n              <InfoText>{account.associatedMortgages[0].name}</InfoText>\n            </AccountList>\n          </RowContainer>\n        </AccountSection>\n      )}\n      <AccountSection>\n        <AccountLabel>Valuation Changes</AccountLabel>\n        <RowContainer>\n          <AccountList>\n            <InfoText>\n              Purchased for&nbsp;<strong>{formatAmount(account.originalPurchasePrice)}</strong>&nbsp; on the&nbsp;\n            {originalPurchasePriceDateFormatted}\n            </InfoText>\n            <InfoText>\n              Since purchase&nbsp;\n              <strong>\n                {sincePurchased(account)} {sincePurchasedPercentage(account)}\n              </strong>\n            </InfoText>\n            <InfoText>\n              Annual Appreciation&nbsp;\n              <strong>{annualAppreciation(account)}</strong>\n            </InfoText>\n          </AccountList>\n        </RowContainer>\n      </AccountSection>\n      <Button\n        // This is a dummy action\n        onClick={() => alert(\"You have navigated to the edit account page\")}\n      >\n        Edit account\n      </Button>\n    </Inset>\n  );\n};\n\n// Images.propTypes = {\n//   url: PropTypes.string.isRequired,\n// };\n\nexport default Detail;\n"]},"metadata":{},"sourceType":"module"}