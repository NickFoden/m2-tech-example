{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/vivienneobrien/Desktop/mh2-tech-test-main/components/detail.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport NumberFormat from \"react-number-format\";\n/* eslint-disable max-statements */\n\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\nimport { add, format } from \"date-fns\";\nimport { Button } from \"./button\";\nimport { AccountHeadline, AccountLabel, AccountSection, AccountList, InfoText, Inset, RowContainer } from \"./style\";\n\nvar subtract = function subtract(a, b) {\n  var total = a - b;\n  return total;\n};\n\nvar calculatePercentage = function calculatePercentage(a, b) {\n  var total = a / b * 100;\n  return total;\n}; // More functionality can be added here if a percentage was not a perfect decimal and needed to be rounded to a certain decimal place, up or down (.floor/.ceil)\n\n\nvar formatPercentage = function formatPercentage(a) {\n  return a + \"%\";\n};\n\nvar divide = function divide(a, b) {\n  var total = a / b;\n  return total;\n};\n\nvar formatDate = function formatDate(a) {\n  return new Intl.DateTimeFormat(\"en-GB\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"2-digit\"\n  }).format(a);\n};\n\nvar formatAmount = function formatAmount(a) {\n  return new Intl.NumberFormat(\"en-GB\", {\n    style: \"currency\",\n    currency: \"GBP\",\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(a);\n};\n\nvar sincePurchased = function sincePurchased(_ref) {\n  var recentValuation = _ref.recentValuation,\n      originalPurchasePrice = _ref.originalPurchasePrice;\n  var sincePurchasedPrice = subtract(recentValuation.amount, originalPurchasePrice); // subtract (take it out of busines context), separation of concerns/calculations\n  // Can also do: <NumberFormat value={sincePurchasedPrice} displayType=\"text\" thousandSeparator={true} prefix=\"Â£\" decimalScale={2} />\n\n  var sincePurchasedPriceFormatted = formatAmount(sincePurchasedPrice);\n  return sincePurchasedPriceFormatted;\n}; // util.js file as plain js, pass in one date and give back a new string\n// semantic: use correct attributes e.g. h1 over a span. break down html semantics the right way\n//const formatDate = (a) => {\n\n\nvar sincePurchasedPercentage = function sincePurchasedPercentage(_ref2) {\n  var recentValuation = _ref2.recentValuation,\n      originalPurchasePrice = _ref2.originalPurchasePrice;\n  var sincePurchasedPrice = subtract(recentValuation.amount, originalPurchasePrice);\n  var sincePurchasedPricePercentageCalculation = calculatePercentage(sincePurchasedPrice, originalPurchasePrice);\n  var sincePurchasedPricePercentageFormatted = formatPercentage(sincePurchasedPricePercentageCalculation);\n  return sincePurchasedPricePercentageFormatted;\n};\n\nvar annualAppreciation = function annualAppreciation(_ref3) {\n  var recentValuation = _ref3.recentValuation,\n      originalPurchasePrice = _ref3.originalPurchasePrice,\n      originalPurchasePriceDate = _ref3.originalPurchasePriceDate;\n  var sincePurchasedPrice = subtract(recentValuation.amount, originalPurchasePrice);\n  var sincePurchasedPricePercentageCalculation = calculatePercentage(sincePurchasedPrice, originalPurchasePrice);\n  var currentYear = new Date().getFullYear();\n  var numberOfYearsSincePurchased = currentYear - parseInt(originalPurchasePriceDate.slice(0, 4));\n  var annualAppreciationCalculation = divide(sincePurchasedPricePercentageCalculation, numberOfYearsSincePurchased);\n  var annualAppreciationFormatted = formatPercentage(annualAppreciationCalculation);\n  return annualAppreciationFormatted;\n}; // const account = {\n//   uid: \"65156cdc-5cfd-4b34-b626-49c83569f35e\",\n//   deleted: false,\n//   dateCreated: \"2020-12-03T08:55:33.421Z\",\n//   currency: \"GBP\",\n//   name: \"15 Temple Way\",\n//   bankName: \"Residential\",\n//   type: \"properties\",\n//   subType: \"residential\",\n//   originalPurchasePrice: 250000,\n//   originalPurchasePriceDate: \"2017-09-03\",\n//   recentValuation: { amount: 310000, status: \"good\" },\n//   associatedMortgages: [\n//     {\n//       name: \"HSBC Repayment Mortgage\",\n//       uid: \"fb463121-b51a-490d-9f19-d2ea76f05e25\",\n//       currentBalance: -175000,\n//     },\n//   ],\n//   canBeManaged: false,\n//   postcode: \"BS1 2AA\",\n//   lastUpdate: \"2020-12-01T08:55:33.421Z\",\n//   updateAfterDays: 30,\n// };\n\n\nvar Detail = function Detail() {\n  _s();\n\n  var _useState = useState({}),\n      account = _useState[0],\n      setAccount = _useState[1];\n\n  useEffect(function () {\n    axios.get(\"/api/account\").then(function (response) {\n      return setAccount(response.account);\n    }).then(console.log());\n  }, []); // checking if account is empty\n\n  if (!!account) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }, _this);\n  }\n\n  console.log(account); // const Detail = ({}) => {\n  //   useEffect(() => {\n  //     window\n  //       .fetch(\"/api/account\")\n  //       .then((res) => res.json())\n  //       .then(console.log);\n  //   }, []);\n\n  var mortgage;\n  var lastUpdate = new Date(account.lastUpdate);\n\n  if (account.associatedMortgages.length) {\n    mortgage = account.associatedMortgages[0];\n  }\n\n  var recentValuationAmountFormatted = formatAmount(account.recentValuation.amount);\n  var currentBalanceFormatted = formatAmount(Math.abs(account.associatedMortgages[0].currentBalance));\n  var lastUpdatedFormatted = formatDate(lastUpdate);\n  console.log(lastUpdate);\n  var originalPurchasePriceDateFormatted = formatDate(account.originalPurchasePriceDateFormatted); // const originalPruchasePriceFormatted = formatAmount(originalPurchasePrice)\n\n  return /*#__PURE__*/_jsxDEV(Inset, {\n    children: [/*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Estimated Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(AccountHeadline, {\n        children: recentValuationAmountFormatted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(AccountList, {\n        children: [/*#__PURE__*/_jsxDEV(InfoText, {\n          children: \"Last updated \".concat(lastUpdatedFormatted)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(InfoText, {\n          children: \"Next update \".concat(format(add(lastUpdate, {\n            days: account.updateAfterDays\n          }), \"do MMM yyyy\"))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Property details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(RowContainer, {\n        children: /*#__PURE__*/_jsxDEV(AccountList, {\n          children: [/*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.bankName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.postcode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, _this), mortgage && /*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Mortgage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(RowContainer // This is a dummy action\n      , {\n        onClick: function onClick() {\n          return alert(\"You have navigated to the mortgage page\");\n        },\n        children: /*#__PURE__*/_jsxDEV(AccountList, {\n          children: [/*#__PURE__*/_jsxDEV(InfoText, {\n            children: currentBalanceFormatted\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.associatedMortgages[0].name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Valuation Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(RowContainer, {\n        children: /*#__PURE__*/_jsxDEV(AccountList, {\n          children: [/*#__PURE__*/_jsxDEV(InfoText, {\n            children: [\"Purchased for\\xA0\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: formatAmount(account.originalPurchasePrice)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 34\n            }, _this), \"\\xA0 on the\\xA0\", originalPurchasePriceDateFormatted]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: [\"Since purchase\\xA0\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [sincePurchased(account), \" \", sincePurchasedPercentage(account)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: [\"Annual Appreciation\\xA0\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: annualAppreciation(account)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Button // This is a dummy action\n    , {\n      onClick: function onClick() {\n        return alert(\"You have navigated to the edit account page\");\n      },\n      children: \"Edit account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, _this);\n}; // Images.propTypes = {\n//   url: PropTypes.string.isRequired,\n// };\n\n\n_s(Detail, \"AWsNvWaHkHMx6jch3jzcPMVhqtg=\");\n\n_c = Detail;\nexport default Detail;\n\nvar _c;\n\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"sources":["/Users/vivienneobrien/Desktop/mh2-tech-test-main/components/detail.js"],"names":["NumberFormat","PropTypes","React","useEffect","useState","add","format","Button","AccountHeadline","AccountLabel","AccountSection","AccountList","InfoText","Inset","RowContainer","subtract","a","b","total","calculatePercentage","formatPercentage","divide","formatDate","Intl","DateTimeFormat","year","month","day","formatAmount","style","currency","minimumFractionDigits","maximumFractionDigits","sincePurchased","recentValuation","originalPurchasePrice","sincePurchasedPrice","amount","sincePurchasedPriceFormatted","sincePurchasedPercentage","sincePurchasedPricePercentageCalculation","sincePurchasedPricePercentageFormatted","annualAppreciation","originalPurchasePriceDate","currentYear","Date","getFullYear","numberOfYearsSincePurchased","parseInt","slice","annualAppreciationCalculation","annualAppreciationFormatted","Detail","account","setAccount","axios","get","then","response","console","log","mortgage","lastUpdate","associatedMortgages","length","recentValuationAmountFormatted","currentBalanceFormatted","Math","abs","currentBalance","lastUpdatedFormatted","originalPurchasePriceDateFormatted","days","updateAfterDays","name","bankName","postcode","alert"],"mappings":"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","sourcesContent":["import NumberFormat from \"react-number-format\";\n/* eslint-disable max-statements */\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\nimport { add, format } from \"date-fns\";\nimport { Button } from \"./button\";\n\nimport {\n  AccountHeadline,\n  AccountLabel,\n  AccountSection,\n  AccountList,\n  InfoText,\n  Inset,\n  RowContainer,\n} from \"./style\";\n\nconst subtract = (a, b) => {\n  const total = a - b;\n  return total;\n};\n\nconst calculatePercentage = (a, b) => {\n  const total = (a / b) * 100;\n  return total;\n};\n\n// More functionality can be added here if a percentage was not a perfect decimal and needed to be rounded to a certain decimal place, up or down (.floor/.ceil)\nconst formatPercentage = (a) => {\n  return (\n    a + \"%\" \n  );\n};\n\nconst divide = (a, b) => {\n  const total = a / b;\n  return total;\n};\n\nconst formatDate = (a) => {\n  return new Intl.DateTimeFormat(\"en-GB\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"2-digit\",\n  }).format(a);\n};\n\nconst formatAmount = (a) => {\n  return new Intl.NumberFormat(\"en-GB\", {\n    style: \"currency\",\n    currency: \"GBP\",\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(a);\n}\n\nconst sincePurchased = ({ recentValuation, originalPurchasePrice }) => {\n  const sincePurchasedPrice = subtract(\n    recentValuation.amount,\n    originalPurchasePrice\n  ); // subtract (take it out of busines context), separation of concerns/calculations\n  // Can also do: <NumberFormat value={sincePurchasedPrice} displayType=\"text\" thousandSeparator={true} prefix=\"Â£\" decimalScale={2} />\n  const sincePurchasedPriceFormatted = formatAmount(sincePurchasedPrice)\n  return sincePurchasedPriceFormatted;\n};\n\n// util.js file as plain js, pass in one date and give back a new string\n// semantic: use correct attributes e.g. h1 over a span. break down html semantics the right way\n//const formatDate = (a) => {\n\n\nconst sincePurchasedPercentage = ({\n  recentValuation,\n  originalPurchasePrice,\n}) => {\n  const sincePurchasedPrice = subtract(\n    recentValuation.amount,\n    originalPurchasePrice\n  );\n  const sincePurchasedPricePercentageCalculation = calculatePercentage(\n    sincePurchasedPrice,\n    originalPurchasePrice\n  );\n  const sincePurchasedPricePercentageFormatted = formatPercentage(\n    sincePurchasedPricePercentageCalculation\n  );\n  return sincePurchasedPricePercentageFormatted;\n};\n\nconst annualAppreciation = ({\n  recentValuation,\n  originalPurchasePrice,\n  originalPurchasePriceDate,\n}) => {\n  const sincePurchasedPrice = subtract(\n    recentValuation.amount,\n    originalPurchasePrice\n  );\n  const sincePurchasedPricePercentageCalculation = calculatePercentage(\n    sincePurchasedPrice,\n    originalPurchasePrice\n  );\n\n  const currentYear = new Date().getFullYear();\n  const numberOfYearsSincePurchased =\n    currentYear - parseInt(originalPurchasePriceDate.slice(0, 4));\n\n  const annualAppreciationCalculation = divide(\n    sincePurchasedPricePercentageCalculation,\n    numberOfYearsSincePurchased\n  );\n  const annualAppreciationFormatted = formatPercentage(\n    annualAppreciationCalculation\n  );\n  return annualAppreciationFormatted;\n};\n\n// const account = {\n//   uid: \"65156cdc-5cfd-4b34-b626-49c83569f35e\",\n//   deleted: false,\n//   dateCreated: \"2020-12-03T08:55:33.421Z\",\n//   currency: \"GBP\",\n//   name: \"15 Temple Way\",\n//   bankName: \"Residential\",\n//   type: \"properties\",\n//   subType: \"residential\",\n//   originalPurchasePrice: 250000,\n//   originalPurchasePriceDate: \"2017-09-03\",\n//   recentValuation: { amount: 310000, status: \"good\" },\n//   associatedMortgages: [\n//     {\n//       name: \"HSBC Repayment Mortgage\",\n//       uid: \"fb463121-b51a-490d-9f19-d2ea76f05e25\",\n//       currentBalance: -175000,\n//     },\n//   ],\n//   canBeManaged: false,\n//   postcode: \"BS1 2AA\",\n//   lastUpdate: \"2020-12-01T08:55:33.421Z\",\n//   updateAfterDays: 30,\n// };\n\n\n\nconst Detail = () => {\n  const [account, setAccount] = useState({});\n\nuseEffect(() => {\n  axios\n    .get(\"/api/account\")\n    .then((response) => setAccount(response.account))\n    .then(console.log());\n}, []);\n\n// checking if account is empty\nif (!!account) {\n  return (<div></div>)\n} \n\n  console.log(account)\n\n// const Detail = ({}) => {\n//   useEffect(() => {\n//     window\n//       .fetch(\"/api/account\")\n//       .then((res) => res.json())\n//       .then(console.log);\n//   }, []);\n\n  let mortgage;\n  const lastUpdate = new Date(account.lastUpdate);\n  if (account.associatedMortgages.length) {\n    mortgage = account.associatedMortgages[0];\n  }\n\n  const recentValuationAmountFormatted = formatAmount(account.recentValuation.amount);\n  const currentBalanceFormatted = formatAmount(Math.abs(account.associatedMortgages[0].currentBalance));\n  const lastUpdatedFormatted = formatDate(lastUpdate);\n  console.log(lastUpdate)\n  const originalPurchasePriceDateFormatted = formatDate(account.originalPurchasePriceDateFormatted)\n  // const originalPruchasePriceFormatted = formatAmount(originalPurchasePrice)\n  \n  return (\n    <Inset>\n      <AccountSection>\n        <AccountLabel>Estimated Value</AccountLabel>\n        <AccountHeadline>\n          {recentValuationAmountFormatted}\n        </AccountHeadline>\n        <AccountList>\n          <InfoText>\n            {`Last updated ${lastUpdatedFormatted}`}\n          </InfoText>\n          <InfoText>\n            {`Next update ${format(add(lastUpdate, { days: account.updateAfterDays }),\"do MMM yyyy\")}`}\n          </InfoText>\n        </AccountList>\n      </AccountSection>\n      <AccountSection>\n        <AccountLabel>Property details</AccountLabel>\n        <RowContainer>\n          <AccountList>\n            <InfoText>{account.name}</InfoText>\n            <InfoText>{account.bankName}</InfoText>\n            <InfoText>{account.postcode}</InfoText>\n          </AccountList>\n        </RowContainer>\n      </AccountSection>\n      {mortgage && (\n        <AccountSection>\n          <AccountLabel>Mortgage</AccountLabel>\n          <RowContainer\n            // This is a dummy action\n            onClick={() => alert(\"You have navigated to the mortgage page\")}\n          >\n            <AccountList>\n              <InfoText>\n                {currentBalanceFormatted}\n              </InfoText>\n              <InfoText>{account.associatedMortgages[0].name}</InfoText>\n            </AccountList>\n          </RowContainer>\n        </AccountSection>\n      )}\n      <AccountSection>\n        <AccountLabel>Valuation Changes</AccountLabel>\n        <RowContainer>\n          <AccountList>\n            <InfoText>\n              Purchased for&nbsp;<strong>{formatAmount(account.originalPurchasePrice)}</strong>&nbsp; on the&nbsp;\n            {originalPurchasePriceDateFormatted}\n            </InfoText>\n            <InfoText>\n              Since purchase&nbsp;\n              <strong>\n                {sincePurchased(account)} {sincePurchasedPercentage(account)}\n              </strong>\n            </InfoText>\n            <InfoText>\n              Annual Appreciation&nbsp;\n              <strong>{annualAppreciation(account)}</strong>\n            </InfoText>\n          </AccountList>\n        </RowContainer>\n      </AccountSection>\n      <Button\n        // This is a dummy action\n        onClick={() => alert(\"You have navigated to the edit account page\")}\n      >\n        Edit account\n      </Button>\n    </Inset>\n  );\n};\n\n// Images.propTypes = {\n//   url: PropTypes.string.isRequired,\n// };\n\nexport default Detail;\n"]},"metadata":{},"sourceType":"module"}