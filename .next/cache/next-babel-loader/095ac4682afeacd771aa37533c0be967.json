{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/vivienneobrien/Desktop/mh2-tech-test-main/components/detail.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport NumberFormat from \"react-number-format\";\n/* eslint-disable max-statements */\n\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\nimport { add, format } from \"date-fns\";\nimport { Button } from \"./button\";\nimport { AccountHeadline, AccountLabel, AccountSection, AccountList, InfoText, Inset, RowContainer } from \"./style\";\n\nvar subtract = function subtract(a, b) {\n  var total = a - b;\n  return total;\n};\n\nvar calculatePercentage = function calculatePercentage(a, b) {\n  var total = a / b * 100;\n  return total;\n};\n\nvar formatPercentage = function formatPercentage(a) {\n  return a + \"%\" // .float/.ceil etc think about rounding and to a specific space\n  ;\n};\n\nvar divide = function divide(a, b) {\n  var total = a / b;\n  return total;\n};\n\nvar sincePurchased = function sincePurchased(_ref) {\n  var recentValuation = _ref.recentValuation,\n      originalPurchasePrice = _ref.originalPurchasePrice;\n  var sincePurchasedPrice = subtract(recentValuation.amount, originalPurchasePrice); // subtract (take it out of busines context), separation of concerns/calculations\n  // Can also do: <NumberFormat value={sincePurchasedPrice} displayType=\"text\" thousandSeparator={true} prefix=\"Â£\" decimalScale={2} />\n\n  {\n    new Intl.NumberFormat(\"en-GB\", {\n      style: \"currency\",\n      currency: \"GBP\",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(sincePurchasedPrice);\n  }\n  return sincePurchasedPrice;\n};\n\nvar sincePurchasedPercentage = function sincePurchasedPercentage(_ref2) {\n  var recentValuation = _ref2.recentValuation,\n      originalPurchasePrice = _ref2.originalPurchasePrice;\n  var sincePurchasedPrice = subtract(recentValuation.amount, originalPurchasePrice);\n  var sincePurchasedPricePercentageCalculation = calculatePercentage(sincePurchasedPrice, originalPurchasePrice);\n  var sincePurchasedPricePercentageFormatted = formatPercentage(sincePurchasedPricePercentageCalculation);\n  return sincePurchasedPricePercentageFormatted;\n};\n\nvar annualAppreciation = function annualAppreciation(_ref3) {\n  var recentValuation = _ref3.recentValuation,\n      originalPurchasePrice = _ref3.originalPurchasePrice,\n      originalPurchasePriceDate = _ref3.originalPurchasePriceDate;\n  var sincePurchasedPrice = subtract(recentValuation.amount, originalPurchasePrice);\n  var sincePurchasedPricePercentageCalculation = calculatePercentage(sincePurchasedPrice, originalPurchasePrice);\n  var currentYear = new Date().getFullYear();\n  var numberOfYearsSincePurchased = currentYear - parseInt(originalPurchasePriceDate.slice(0, 4));\n  var annualAppreciationCalculation = divide(sincePurchasedPricePercentageCalculation, numberOfYearsSincePurchased);\n  var annualAppreciationFormatted = formatPercentage(annualAppreciationCalculation);\n  return annualAppreciationFormatted;\n}; // util.js file as plain js, pass in one date and give back a new string\n// semantic: use correct attributes e.g. h1 over a span. break down html semantics the right way\n\n\nvar formatDate = function formatDate(_ref4) {\n  var originalPurchasePriceDate = _ref4.originalPurchasePriceDate;\n  return new Intl.DateTimeFormat(\"en-GB\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"2-digit\"\n  }).format(originalPurchasePriceDate);\n}; // const account = {\n//   uid: \"65156cdc-5cfd-4b34-b626-49c83569f35e\",\n//   deleted: false,\n//   dateCreated: \"2020-12-03T08:55:33.421Z\",\n//   currency: \"GBP\",\n//   name: \"15 Temple Way\",\n//   bankName: \"Residential\",\n//   type: \"properties\",\n//   subType: \"residential\",\n//   originalPurchasePrice: 250000,\n//   originalPurchasePriceDate: \"2017-09-03\",\n//   recentValuation: { amount: 310000, status: \"good\" },\n//   associatedMortgages: [\n//     {\n//       name: \"HSBC Repayment Mortgage\",\n//       uid: \"fb463121-b51a-490d-9f19-d2ea76f05e25\",\n//       currentBalance: -175000,\n//     },\n//   ],\n//   canBeManaged: false,\n//   postcode: \"BS1 2AA\",\n//   lastUpdate: \"2020-12-01T08:55:33.421Z\",\n//   updateAfterDays: 30,\n// };\n// state, setstate then render\n// const Detail = ({}) => {\n//   useEffect(() => {\n//     window\n//       .fetch(\"/api/account\")\n//       .then((res) => res.json())\n//       .then(console.log);\n//   }, []);\n\n\nvar Detail = function Detail() {\n  _s();\n\n  var _useState = useState({}),\n      account = _useState[0],\n      setAccount = _useState[1];\n\n  useEffect(function () {\n    axios.get(\"/api/account\").then(function (response) {\n      return setAccount(response.data);\n    }).then(console.log());\n  }, []);\n  var mortgage;\n  var lastUpdate = new Date(account.lastUpdate);\n\n  if (account.associatedMortgages.length) {\n    mortgage = account.associatedMortgages[0];\n  }\n\n  return /*#__PURE__*/_jsxDEV(Inset, {\n    children: [/*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Estimated Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(AccountHeadline, {\n        children: new Intl.NumberFormat(\"en-GB\", {\n          style: \"currency\",\n          currency: \"GBP\"\n        }).format(account.recentValuation.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(AccountList, {\n        children: [/*#__PURE__*/_jsxDEV(InfoText, {\n          children: \"Last updated \".concat(format(lastUpdate, \"do MMM yyyy\"))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(InfoText, {\n          children: \"Next update \".concat(format(add(lastUpdate, {\n            days: account.updateAfterDays\n          }), \"do MMM yyyy\"))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Property details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(RowContainer, {\n        children: /*#__PURE__*/_jsxDEV(AccountList, {\n          children: [/*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.bankName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.postcode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, _this), mortgage && /*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Mortgage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(RowContainer // This is a dummy action\n      , {\n        onClick: function onClick() {\n          return alert(\"You have navigated to the mortgage page\");\n        },\n        children: /*#__PURE__*/_jsxDEV(AccountList, {\n          children: [/*#__PURE__*/_jsxDEV(InfoText, {\n            children: new Intl.NumberFormat(\"en-GB\", {\n              style: \"currency\",\n              currency: \"GBP\"\n            }).format(Math.abs(account.associatedMortgages[0].currentBalance))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: account.associatedMortgages[0].name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(AccountSection, {\n      children: [/*#__PURE__*/_jsxDEV(AccountLabel, {\n        children: \"Valuation Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(RowContainer, {\n        children: /*#__PURE__*/_jsxDEV(AccountList, {\n          children: [/*#__PURE__*/_jsxDEV(InfoText, {\n            children: [\"Purchased for\\xA0\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"\\xA3199,500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 34\n            }, _this), \"\\xA0 on the\\xA0\", formatDate({\n              account: account\n            }), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: [\"Since purchase\\xA0\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [sincePurchased(account), \" \", sincePurchasedPercentage(account)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(InfoText, {\n            children: [\"Annual Appreciation\\xA0\", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: annualAppreciation(account)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Button // This is a dummy action\n    , {\n      onClick: function onClick() {\n        return alert(\"You have navigated to the edit account page\");\n      },\n      children: \"Edit account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Detail, \"AWsNvWaHkHMx6jch3jzcPMVhqtg=\");\n\n_c = Detail;\nexport default Detail;\n\nvar _c;\n\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"sources":["/Users/vivienneobrien/Desktop/mh2-tech-test-main/components/detail.js"],"names":["NumberFormat","PropTypes","React","useEffect","useState","add","format","Button","AccountHeadline","AccountLabel","AccountSection","AccountList","InfoText","Inset","RowContainer","subtract","a","b","total","calculatePercentage","formatPercentage","divide","sincePurchased","recentValuation","originalPurchasePrice","sincePurchasedPrice","amount","Intl","style","currency","minimumFractionDigits","maximumFractionDigits","sincePurchasedPercentage","sincePurchasedPricePercentageCalculation","sincePurchasedPricePercentageFormatted","annualAppreciation","originalPurchasePriceDate","currentYear","Date","getFullYear","numberOfYearsSincePurchased","parseInt","slice","annualAppreciationCalculation","annualAppreciationFormatted","formatDate","DateTimeFormat","year","month","day","Detail","account","setAccount","axios","get","then","response","data","console","log","mortgage","lastUpdate","associatedMortgages","length","days","updateAfterDays","name","bankName","postcode","alert","Math","abs","currentBalance"],"mappings":"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","sourcesContent":["import NumberFormat from \"react-number-format\";\n\n/* eslint-disable max-statements */\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\nimport { add, format } from \"date-fns\";\nimport { Button } from \"./button\";\n\nimport {\n  AccountHeadline,\n  AccountLabel,\n  AccountSection,\n  AccountList,\n  InfoText,\n  Inset,\n  RowContainer,\n} from \"./style\";\n\n\n\nconst subtract = (a, b) => {\n  const total = a - b;\n  return total;\n};\n\nconst calculatePercentage = (a, b) => {\n  const total = (a/ b) * 100;\n  return total;\n}\n\nconst formatPercentage = (a) => {\n  return (\n     a + \"%\" // .float/.ceil etc think about rounding and to a specific space\n  )\n}\n\nconst divide = (a,b) => {\n  const total = a/b;\n  return (\n   total\n  );\n}\n\nconst sincePurchased = ({ recentValuation, originalPurchasePrice }) => {\n  const sincePurchasedPrice = subtract(recentValuation.amount, originalPurchasePrice); // subtract (take it out of busines context), separation of concerns/calculations\n  // Can also do: <NumberFormat value={sincePurchasedPrice} displayType=\"text\" thousandSeparator={true} prefix=\"Â£\" decimalScale={2} />\n  {\n    new Intl.NumberFormat(\"en-GB\", {\n      style: \"currency\",\n      currency: \"GBP\",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(sincePurchasedPrice);\n  }\n  return sincePurchasedPrice;\n};\n\nconst sincePurchasedPercentage = ({\n  recentValuation,\n  originalPurchasePrice,\n}) => {\n  const sincePurchasedPrice = subtract(recentValuation.amount,originalPurchasePrice);\n  const sincePurchasedPricePercentageCalculation = calculatePercentage(sincePurchasedPrice, originalPurchasePrice);\n  const sincePurchasedPricePercentageFormatted = formatPercentage(sincePurchasedPricePercentageCalculation);\n  return sincePurchasedPricePercentageFormatted;\n};\n\nconst annualAppreciation = ({\n  recentValuation,\n  originalPurchasePrice,\n  originalPurchasePriceDate,\n}) => {\n  const sincePurchasedPrice = subtract(recentValuation.amount,originalPurchasePrice);\n  const sincePurchasedPricePercentageCalculation = calculatePercentage(sincePurchasedPrice,originalPurchasePrice);\n\n  const currentYear = new Date().getFullYear();\n  const numberOfYearsSincePurchased =\n    currentYear - parseInt(originalPurchasePriceDate.slice(0, 4));\n\n  const annualAppreciationCalculation = divide(sincePurchasedPricePercentageCalculation, numberOfYearsSincePurchased);\n  const annualAppreciationFormatted = formatPercentage(annualAppreciationCalculation);\n  return annualAppreciationFormatted;\n};\n\n// util.js file as plain js, pass in one date and give back a new string\n// semantic: use correct attributes e.g. h1 over a span. break down html semantics the right way\nconst formatDate = ({ originalPurchasePriceDate }) => {\n  return new Intl.DateTimeFormat(\"en-GB\", {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"2-digit\",\n      }).format(originalPurchasePriceDate)\n  ;\n};\n\n// const account = {\n//   uid: \"65156cdc-5cfd-4b34-b626-49c83569f35e\",\n//   deleted: false,\n//   dateCreated: \"2020-12-03T08:55:33.421Z\",\n//   currency: \"GBP\",\n//   name: \"15 Temple Way\",\n//   bankName: \"Residential\",\n//   type: \"properties\",\n//   subType: \"residential\",\n//   originalPurchasePrice: 250000,\n//   originalPurchasePriceDate: \"2017-09-03\",\n//   recentValuation: { amount: 310000, status: \"good\" },\n//   associatedMortgages: [\n//     {\n//       name: \"HSBC Repayment Mortgage\",\n//       uid: \"fb463121-b51a-490d-9f19-d2ea76f05e25\",\n//       currentBalance: -175000,\n//     },\n//   ],\n//   canBeManaged: false,\n//   postcode: \"BS1 2AA\",\n//   lastUpdate: \"2020-12-01T08:55:33.421Z\",\n//   updateAfterDays: 30,\n// };\n\n// state, setstate then render\n// const Detail = ({}) => {\n//   useEffect(() => {\n//     window\n//       .fetch(\"/api/account\")\n//       .then((res) => res.json())\n//       .then(console.log);\n//   }, []);\n\n\n  const Detail = () => {\n    const [account, setAccount] = useState({})\n\n  useEffect(() => {\n    axios\n      .get(\"/api/account\")\n      .then((response) => setAccount(response.data))\n      .then(console.log());\n  }, []);\n\n  let mortgage;\n  const lastUpdate = new Date(account.lastUpdate);\n  if (account.associatedMortgages.length) {\n    mortgage = account.associatedMortgages[0];\n  }\n\n  \n  return (\n    <Inset>\n      <AccountSection>\n        <AccountLabel>Estimated Value</AccountLabel>\n        <AccountHeadline>\n          {new Intl.NumberFormat(\"en-GB\", {\n            style: \"currency\",\n            currency: \"GBP\",\n          }).format(account.recentValuation.amount)}\n        </AccountHeadline>\n        <AccountList>\n          <InfoText>\n            {`Last updated ${format(lastUpdate, \"do MMM yyyy\")}`}\n          </InfoText>\n          <InfoText>\n            {`Next update ${format(\n              add(lastUpdate, { days: account.updateAfterDays }),\n              \"do MMM yyyy\"\n            )}`}\n          </InfoText>\n        </AccountList>\n      </AccountSection>\n      <AccountSection>\n        <AccountLabel>Property details</AccountLabel>\n        <RowContainer>\n          <AccountList>\n            <InfoText>{account.name}</InfoText>\n            <InfoText>{account.bankName}</InfoText>\n            <InfoText>{account.postcode}</InfoText>\n          </AccountList>\n        </RowContainer>\n      </AccountSection>\n      {mortgage && (\n        <AccountSection>\n          <AccountLabel>Mortgage</AccountLabel>\n          <RowContainer\n            // This is a dummy action\n            onClick={() => alert(\"You have navigated to the mortgage page\")}\n          >\n            <AccountList>\n              <InfoText>\n                {new Intl.NumberFormat(\"en-GB\", {\n                  style: \"currency\",\n                  currency: \"GBP\",\n                }).format(\n                  Math.abs(account.associatedMortgages[0].currentBalance)\n                )}\n              </InfoText>\n              <InfoText>{account.associatedMortgages[0].name}</InfoText>\n            </AccountList>\n          </RowContainer>\n        </AccountSection>\n      )}\n      <AccountSection>\n        <AccountLabel>Valuation Changes</AccountLabel>\n        <RowContainer>\n          <AccountList>\n            <InfoText>\n              Purchased for&nbsp;<strong>Â£199,500</strong>&nbsp; on the&nbsp;\n              {formatDate({ account })}{\" \"}\n            </InfoText>\n            <InfoText>\n              Since purchase&nbsp;\n              <strong>\n                {sincePurchased(account)} {sincePurchasedPercentage(account)}\n              </strong>\n            </InfoText>\n            <InfoText>\n              Annual Appreciation&nbsp;\n              <strong>{annualAppreciation(account)}</strong>\n            </InfoText>\n          </AccountList>\n        </RowContainer>\n      </AccountSection>\n      <Button\n        // This is a dummy action\n        onClick={() => alert(\"You have navigated to the edit account page\")}\n      >\n        Edit account\n      </Button>\n    </Inset>\n  );\n};\n\nexport default Detail;\n"]},"metadata":{},"sourceType":"module"}